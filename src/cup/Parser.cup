package com.ufcg.compiladores;

import java_cup.runtime.*;


parser code {:
:};


terminal PROGRAM, BEGIN, END, VARIABLE, FUNCTION, PROCEDURE;
terminal EQ, NE, GT, LT, GE, LE, ADD, SUB, MUL, DIV, MOD, ASSIGN;
terminal BOOLEAN, INTEGER, STRING;
terminal LEFT_PARENTHESIS, RIGHT_PARENTHESIS;
terminal COMMA, COLON, SEMICOLON, FULL_STOP;
terminal IDENTIFIER;

non terminal root, program, body;
non terminal declarations, declaration, statements, statement;
non terminal variables, variable, identifiers, literal, opt_init;
non terminal function, procedure, opt_params, params, param;
non terminal attribuition, call, opt_arguments, arguments;
non terminal exp, exp1, exp2, exp3;

start with root;

root ::= program declarations body FULL_STOP;
program ::= PROGRAM IDENTIFIER SEMICOLON;
body ::= BEGIN statements END;

declarations ::= declarations declaration
	| /* empty */
	;

declaration ::= VARIABLE variables
	| function
	| procedure
	;

variables ::= variables variable 
	| variable
	;

variable ::= IDENTIFIER COMMA identifiers COLON IDENTIFIER SEMICOLON
	| IDENTIFIER COLON IDENTIFIER opt_init SEMICOLON;

opt_init ::= EQ exp // apenas express√µes constantes devem ser permitidas
	| /* empty */
	;

procedure ::= PROCEDURE IDENTIFIER opt_params SEMICOLON declarations BEGIN statements END SEMICOLON;

function ::= FUNCTION IDENTIFIER opt_params COLON IDENTIFIER SEMICOLON declarations BEGIN statements END SEMICOLON;

opt_params ::= LEFT_PARENTHESIS params RIGHT_PARENTHESIS
	| LEFT_PARENTHESIS RIGHT_PARENTHESIS
	| /* empty */
	;

params ::= params SEMICOLON param
	| param
	;

param ::= identifiers COLON IDENTIFIER
	| VARIABLE identifiers COLON IDENTIFIER
	;

identifiers ::= identifiers COMMA IDENTIFIER
	| IDENTIFIER
	;

literal ::= BOOLEAN
	| INTEGER
	| STRING
	;

statements ::= statements statement
	| /* empty */
	;

statement ::= attribuition
	| call SEMICOLON
	;

call ::= IDENTIFIER LEFT_PARENTHESIS opt_arguments RIGHT_PARENTHESIS;

opt_arguments ::= arguments
	| /* empty */
	;

arguments ::= arguments COMMA exp
	| exp
	;

attribuition ::= IDENTIFIER ASSIGN exp SEMICOLON;

exp ::= exp EQ exp1
	| exp NE exp1
	| exp GT exp1
	| exp LT exp1
	| exp GE exp1
	| exp LE exp1
	| exp1
	;
	
exp1 ::= exp1 ADD exp2
	| exp1 SUB exp2
	| ADD exp2
	| SUB exp2
	| exp2
	;
	
exp2 ::= exp2 MUL exp3
	| exp2 DIV exp3
	| exp2 MOD exp3
	| exp3
	;
	
exp3 ::= literal
	| call
	| IDENTIFIER
	| LEFT_PARENTHESIS exp RIGHT_PARENTHESIS
	;